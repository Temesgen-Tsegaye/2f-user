// schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          Int          @id @default(autoincrement())
  phonenumber String       @unique()
  type        String       @default("normal")
  password    String
  name        String       @default("User")
  email       String       @default("someemail")
  favorites   Favorite[]
  watchLaters WatchLater[]
}

model Content {
  id            Int          @id @default(autoincrement())
  title         String
  duration      Int
  description   String
  channelId     Int
  typeId        Int
  categoryId    Int
  videoUrl      String
  coverImageUrl String
  status        Boolean
  channel       Channel      @relation(fields: [channelId], references: [id])
  type          Type         @relation(fields: [typeId], references: [id])
  category      Category     @relation(fields: [categoryId], references: [id])
  favorites     Favorite[]
  watchLaters   WatchLater[]
}

model Channel {
  id       Int       @id @default(autoincrement())
  name     String
  status   Boolean   @default(true)
  contents Content[]
}

model Type {
  id       Int       @id @default(autoincrement())
  name     String
  contents Content[]
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  contents Content[]
}

model Favorite {
  userId    Int
  contentId Int
  user      User    @relation(fields: [userId], references: [id])
  content   Content @relation(fields: [contentId], references: [id])

  @@id([userId, contentId])
}

model WatchLater {
  userId    Int
  contentId Int
  user      User    @relation(fields: [userId], references: [id])
  content   Content @relation(fields: [contentId], references: [id])

  @@id([userId, contentId])
}
